#!/usr/bin/env tsx

import { db } from '@/db/index';
import { analysis_steps } from '@/db/schema';
import { eq, and } from 'drizzle-orm';

/**
 * Script pour mettre √† jour tous les prompts avec des URLs dynamiques
 * Remplace les URLs hardcod√©es par des placeholders {BASE_URL}
 */
async function updatePromptsDynamicUrls() {
  try {
    console.log('üîÑ Mise √† jour des prompts avec URLs dynamiques...');

    // √âtape 0: Upload des documents
    const step0Prompt = `Voici tous les documents du projet {projectUniqueId} dans une archive ZIP. Peux-tu analyser ces documents et me donner un aper√ßu g√©n√©ral du projet ? Il y a {documentCount} documents au total.

Une fois ton analyse termin√©e, d√©clenche l'√©tape suivante (Analyse globale) en faisant un POST sur : {BASE_URL}/api/workflow/trigger-step-1/{projectUniqueId}

Ce POST marquera automatiquement cette √©tape comme termin√©e et d√©clenchera l'analyse globale.`;

    await db
      .update(analysis_steps)
      .set({ prompt: step0Prompt })
      .where(and(
        eq(analysis_steps.order, 0),
        eq(analysis_steps.isActive, 1)
      ));

    console.log('‚úÖ √âtape 0 (Upload des documents) mise √† jour');

    // √âtape 1: Analyse globale
    const step1Prompt = `R√©alisez une analyse d√©taill√©e et structur√©e du projet d'investissement. Incluez : 1) Analyse financi√®re (rentabilit√©, cash-flow, ROI), 2) Analyse du march√© local, 3) √âvaluation des risques, 4) Points forts et faiblesses, 5) Recommandations strat√©giques. Soyez pr√©cis et utilisez les donn√©es des documents fournis.

IMPORTANT: Retournez votre analyse sous forme JSON structur√© via POST sur l'endpoint {BASE_URL}/api/workflow/analysis-macro/{projectUniqueId} avec le format suivant :

{
  "projectUniqueId": "{projectUniqueId}",
  "macroAnalysis": {
    "overallRisk": "low|medium|high",
    "marketPotential": "low|medium|high",
    "technicalFeasibility": "low|medium|high",
    "financialViability": "low|medium|high",
    "competitiveAdvantage": "low|medium|high",
    "summary": "R√©sum√© de votre analyse globale",
    "keyStrengths": ["Point fort 1", "Point fort 2", ...],
    "keyWeaknesses": ["Point faible 1", "Point faible 2", ...],
    "recommendedActions": ["Action recommand√©e 1", "Action recommand√©e 2", ...]
  }
}`;

    await db
      .update(analysis_steps)
      .set({ prompt: step1Prompt })
      .where(eq(analysis_steps.name, 'Analyse globale'));

    console.log('‚úÖ √âtape 1 (Analyse globale) mise √† jour');

    // √âtape 2: Consolidation des donn√©es
    const step2Prompt = `Analysez les documents fournis et consolidez toutes les donn√©es cl√©s du projet. Structurez les informations de mani√®re claire et organis√©e.

IMPORTANT: Envoyez les donn√©es consolid√©es via POST sur l'endpoint {BASE_URL}/api/workflow/consolidated-data/{projectUniqueId} avec le format JSON appropri√©.`;

    await db
      .update(analysis_steps)
      .set({ prompt: step2Prompt })
      .where(eq(analysis_steps.name, 'Consolidation des donn√©es'));

    console.log('‚úÖ √âtape 2 (Consolidation des donn√©es) mise √† jour');

    // √âtape 3: R√©cup√©ration des documents manquants
    const step3Prompt = `Identifiez et listez tous les documents manquants qui seraient n√©cessaires pour compl√©ter l'analyse de ce projet d'investissement immobilier. Organisez-les par cat√©gorie (financier, juridique, technique, march√©) et pr√©cisez l'importance de chaque document pour la prise de d√©cision.

IMPORTANT: Structurez votre liste via POST sur l'endpoint {BASE_URL}/api/workflow/missing-documents/{projectUniqueId} avec le format suivant :

{
  "projectUniqueId": "{projectUniqueId}",
  "missingDocuments": [
    {
      "name": "Nom pr√©cis du document",
      "whyMissing": "Explication de pourquoi ce document est n√©cessaire",
      "priority": "high|medium|low",
      "category": "legal|financial|technical|business|regulatory",
      "impactOnProject": "Impact de l'absence de ce document sur le projet",
      "suggestedSources": ["Source sugg√©r√©e 1", "Source sugg√©r√©e 2"]
    }
  ]
}`;

    await db
      .update(analysis_steps)
      .set({ prompt: step3Prompt })
      .where(eq(analysis_steps.name, 'R√©cup√©ration des documents manquants'));

    console.log('‚úÖ √âtape 3 (Documents manquants) mise √† jour');

    // √âtape 4: Points de vigilance
    const step4Prompt = `Analysez le projet d'investissement immobilier et identifiez tous les points de vigilance critiques qui pourraient compromettre l'obtention du financement. Organisez votre analyse en cat√©gories : 1) Risques financiers (ratio d'endettement, capacit√© de remboursement, apport personnel), 2) Risques juridiques (servitudes, litiges, conformit√©), 3) Risques techniques (√©tat du bien, travaux n√©cessaires, diagnostics), 4) Risques de march√© (localisation, √©volution des prix, demande locative). Pour chaque point, √©valuez le niveau de criticit√© et proposez des solutions ou documents compl√©mentaires.

IMPORTANT: Structurez vos points de vigilance via POST sur l'endpoint {BASE_URL}/api/workflow/vigilance-points/{projectUniqueId} avec le format suivant :

{
  "projectUniqueId": "{projectUniqueId}",
  "vigilancePoints": [
    {
      "title": "Titre concis du point de vigilance",
      "whyVigilance": "Explication d√©taill√©e de la raison de vigilance",
      "riskLevel": "high|medium|low",
      "category": "financial|technical|legal|market|operational|regulatory",
      "potentialImpact": "Impact potentiel sur le projet",
      "mitigationStrategies": ["Strat√©gie d'att√©nuation 1", "Strat√©gie d'att√©nuation 2"],
      "monitoringRecommendations": ["Recommandation de suivi 1", "Recommandation de suivi 2"]
    }
  ]
}`;

    await db
      .update(analysis_steps)
      .set({ prompt: step4Prompt })
      .where(eq(analysis_steps.name, 'Points de vigilance'));

    console.log('‚úÖ √âtape 4 (Points de vigilance) mise √† jour');

    // √âtape 5: R√©daction d'un message (pas de changement n√©cessaire)
    console.log('‚ÑπÔ∏è √âtape 5 (R√©daction d\'un message) conserv√©e tel quel');

    console.log('üéâ Tous les prompts ont √©t√© mis √† jour avec des URLs dynamiques !');
    console.log('üìù Les URLs seront maintenant remplac√©es automatiquement selon l\'environnement :');
    console.log('   - Production: https://ai-bricks-analyst-production.up.railway.app');
    console.log('   - Preprod: https://ai-bricks-analyst-preprod.up.railway.app');
    console.log('   - Local: selon la variable BASE_URL');

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour des prompts:', error);
    throw error;
  }
}

// Ex√©cution du script si appel√© directement
if (require.main === module) {
  updatePromptsDynamicUrls()
    .then(() => {
      console.log('Migration termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Migration √©chou√©e:', error);
      process.exit(1);
    });
}

export { updatePromptsDynamicUrls };
