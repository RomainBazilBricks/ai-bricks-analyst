---
description: 
globs: 
alwaysApply: true
---
## 1. Pagination avec cursors obligatoire
- **OBLIGATOIRE** : Utiliser la pagination par cursor pour toutes les listes
- **INTERDIT** : Pagination offset/limit
- Structure type pour les endpoints paginés :
```ts
import { and, gt, lt, desc, asc } from 'drizzle-orm';

export const getPaginatedUsers = async (req: Request, res: Response) => {
  const { cursor, limit = 10, direction = 'next' } = req.query;
  
  try {
    const query = db.select().from(users);
    
    if (cursor) {
      const condition = direction === 'next' 
        ? gt(users.id, Number(cursor))
        : lt(users.id, Number(cursor));
      query.where(condition);
    }
    
    const results = await query
      .orderBy(direction === 'next' ? asc(users.id) : desc(users.id))
      .limit(Number(limit) + 1);
    
    const hasMore = results.length > Number(limit);
    const items = hasMore ? results.slice(0, -1) : results;
    const nextCursor = hasMore ? items[items.length - 1].id : null;
    
    res.json({
      items,
      nextCursor,
      hasMore
    });
  } catch (error) {
    res.status(500).json({ error: (error as Error).message });
  }
};
```

## 2. Structure View/Controller stricte
- **OBLIGATOIRE** : Séparer logique métier (controllers) et gestion des routes
- **INTERDIT** : Logique métier dans les fichiers routes
- Structure existante : [controllers](mdc:back/src/controllers) et @routes
- Exemple de controller correct : [users.controller.ts](mdc:back/src/controllers/users.controller.ts)

## 3. Uniquement GET et POST
- **OBLIGATOIRE** : Utiliser uniquement les méthodes HTTP GET et POST
- **INTERDIT** : Méthodes DELETE, PUT, PATCH
- Structure recommandée :
```ts
// GET /api/users - Liste tous les utilisateurs
// GET /api/users/:id - Récupère un utilisateur
// POST /api/users - Crée un utilisateur
// POST /api/users/:id/delete - Supprime un utilisateur (soft delete)
// POST /api/users/:id/update - Met à jour un utilisateur
```

## 4. Documentation automatique
- **OBLIGATOIRE** : Documenter tous les endpoints avec JSDoc
- **OBLIGATOIRE** : Utiliser des commentaires explicites pour les paramètres
- Structure recommandée :
```ts
/**
 * Récupère tous les utilisateurs avec pagination par cursor
 * @route GET /api/users
 * @param {string} cursor - Cursor pour la pagination
 * @param {number} limit - Nombre d'éléments par page (max 100)
 * @param {string} direction - Direction de pagination ('next' | 'prev')
 * @returns {PaginatedUsersResponse} Liste paginée des utilisateurs
 */
export const getPaginatedUsers = async (req: Request, res: Response) => {
  // Implémentation
};
```

## 5. Utilisation exclusive de Drizzle
- **OBLIGATOIRE** : Utiliser Drizzle ORM pour toutes les opérations base de données
- **INTERDIT** : Requêtes SQL raw ou autres ORMs
- Configuration existante : [database](mdc:back/src/db/index.ts)
- Schéma existant : [schema.ts](mdc:back/src/db/schema.ts)

## 6. Gestion d'erreurs standardisée
- **OBLIGATOIRE** : Utiliser try/catch dans tous les controllers
- **OBLIGATOIRE** : Retourner des erreurs typées
- Structure recommandée :
```ts
export const controllerAction = async (req: Request, res: Response): Promise<any> => {
  try {
    // Logique métier
    res.json(result);
  } catch (error) {
    res.status(500).json({ 
      error: (error as Error).message,
      code: 'INTERNAL_SERVER_ERROR'
    });
  }
};
```